version: '3.8'

services:
  # Frontend application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:3001/api
      - REACT_APP_WS_URL=ws://localhost:3001/ws
      - REACT_APP_USE_REAL_API=true
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - regalytics-network

  # Backend API (placeholder - replace with your actual backend)
  backend:
    image: node:18-alpine
    working_dir: /app
    command: sh -c "echo 'Backend service placeholder - replace with your actual backend' && sleep infinity"
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    restart: unless-stopped
    networks:
      - regalytics-network

  # Database (placeholder - replace with your actual database)
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=regalytics
      - POSTGRES_USER=regalytics
      - POSTGRES_PASSWORD=regalytics_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - regalytics-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - regalytics-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - regalytics-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - regalytics-network

  # n8n workflow automation
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres-n8n
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n_password
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres-n8n
    restart: unless-stopped
    networks:
      - regalytics-network

  # PostgreSQL for n8n
  postgres-n8n:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=n8n_password
    volumes:
      - postgres_n8n_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - regalytics-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  n8n_data:
  postgres_n8n_data:

networks:
  regalytics-network:
    driver: bridge
